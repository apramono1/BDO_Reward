/*
 ------------------------------------------------------------------------------
 INGENICO Technical Software Department
 ------------------------------------------------------------------------------
 Copyright (c) 2015 INGENICO S.A.
 28-32 boulevard de Grenelle 75015 Paris, France.
 All rights reserved.
 This source program is the property of the INGENICO Company mentioned above
 and may not be copied in any form or by any means, whether in part or in whole,
 except under license expressly granted by such INGENICO company.
 All copies of this source program, whether in part or in whole, and
 whether modified or not, must display this and all other
 embedded copyright and ownership notices in full.
 ------------------------------------------------------------------------------
 */

#include <map>
#include <types/capk.h>

namespace bdor {
std::map<unsigned int, types::Capk> GetJcbLiveCapks() {
  std::map<unsigned int, types::Capk> output;

  types::Capk key1;
  key1.index = 0x10;
  key1.modulus = {0x99, 0xB6, 0x34, 0x64, 0xEE, 0x0B, 0x49, 0x57, 0xE4, 0xFD, 0x23, 0xBF, 0x92, 0x3D, 0x12, 0xB6, 0x14,
      0x69, 0xB8, 0xFF, 0xF8, 0x81, 0x43, 0x46, 0xB2, 0xED, 0x6A, 0x78, 0x0F, 0x89, 0x88, 0xEA, 0x9C, 0xF0, 0x43, 0x3B,
      0xC1, 0xE6, 0x55, 0xF0, 0x5E, 0xFA, 0x66, 0xD0, 0xC9, 0x80, 0x98, 0xF2, 0x5B, 0x65, 0x9D, 0x7A, 0x25, 0xB8, 0x47,
      0x8A, 0x36, 0xE4, 0x89, 0x76, 0x0D, 0x07, 0x1F, 0x54, 0xCD, 0xF7, 0x41, 0x69, 0x48, 0xED, 0x73, 0x3D, 0x81, 0x63,
      0x49, 0xDA, 0x2A, 0xAD, 0xDA, 0x22, 0x7E, 0xE4, 0x59, 0x36, 0x20, 0x3C, 0xBF, 0x62, 0x8C, 0xD0, 0x33, 0xAA, 0xBA,
      0x5E, 0x5A, 0x6E, 0x4A, 0xE3, 0x7F, 0xBA, 0xCB, 0x46, 0x11, 0xB4, 0x11, 0x3E, 0xD4, 0x27, 0x52, 0x9C, 0x63, 0x6F,
      0x6C, 0x33, 0x04, 0xF8, 0xAB, 0xDD, 0x6D, 0x9A, 0xD6, 0x60, 0x51, 0x6A, 0xE8, 0x7F, 0x7F, 0x2D, 0xDF, 0x1D, 0x2F,
      0xA4, 0x4C, 0x16, 0x47, 0x27, 0xE5, 0x6B, 0xBC, 0x9B, 0xA2, 0x3C, 0x02, 0x85};
  key1.exponent = {0x03};
  key1.sha1 = {0xC7, 0x5E, 0x52, 0x10, 0xCB, 0xE6, 0xE8, 0xF0, 0x59, 0x4A, 0x0F, 0x19, 0x11, 0xB0, 0x74, 0x18, 0xCA, 0xDB, 0x5B, 0xAB};
  output[key1.index] = key1;

  types::Capk key2;
  key2.index = 0x12;
  key2.modulus = {0xAD, 0xF0, 0x5C, 0xD4, 0xC5, 0xB4, 0x90, 0xB0, 0x87, 0xC3, 0x46, 0x7B, 0x0F, 0x30, 0x43, 0x75, 0x04,
      0x38, 0x84, 0x84, 0x61, 0x28, 0x8B, 0xFE, 0xFD, 0x61, 0x98, 0xDD, 0x57, 0x6D, 0xC3, 0xAD, 0x7A, 0x7C, 0xFA, 0x07,
      0xDB, 0xA1, 0x28, 0xC2, 0x47, 0xA8, 0xEA, 0xB3, 0x0D, 0xC3, 0xA3, 0x0B, 0x02, 0xFC, 0xD7, 0xF1, 0xC8, 0x16, 0x79,
      0x65, 0x46, 0x36, 0x26, 0xFE, 0xFF, 0x8A, 0xB1, 0xAA, 0x61, 0xA4, 0xB9, 0xAE, 0xF0, 0x9E, 0xE1, 0x2B, 0x00, 0x98,
      0x42, 0xA1, 0xAB, 0xA0, 0x1A, 0xDB, 0x4A, 0x2B, 0x17, 0x06, 0x68, 0x78, 0x1E, 0xC9, 0x2B, 0x60, 0xF6, 0x05, 0xFD,
      0x12, 0xB2, 0xB2, 0xA6, 0xF1, 0xFE, 0x73, 0x4B, 0xE5, 0x10, 0xF6, 0x0D, 0xC5, 0xD1, 0x89, 0xE4, 0x01, 0x45, 0x1B,
      0x62, 0xB4, 0xE0, 0x68, 0x51, 0xEC, 0x20, 0xEB, 0xFF, 0x45, 0x22, 0xAA, 0xCC, 0x2E, 0x9C, 0xDC, 0x89, 0xBC, 0x5D,
      0x8C, 0xDE, 0x5D, 0x63, 0x3C, 0xFD, 0x77, 0x22, 0x0F, 0xF6, 0xBB, 0xD4, 0xA9, 0xB4, 0x41, 0x47, 0x3C, 0xC3, 0xC6,
      0xFE, 0xFC, 0x8D, 0x13, 0xE5, 0x7C, 0x3D, 0xE9, 0x7E, 0x12, 0x69, 0xFA, 0x19, 0xF6, 0x55, 0x21, 0x5B, 0x23, 0x56,
      0x3E, 0xD1, 0xD1, 0x86, 0x0D, 0x86, 0x81};
  key2.exponent = {0x03};
  key2.sha1 = {0x87, 0x4B, 0x37, 0x9B, 0x7F, 0x60, 0x7D, 0xC1, 0xCA, 0xF8, 0x7A, 0x19, 0xE4, 0x00, 0xB6, 0xA9, 0xE2, 0x51, 0x63, 0xE8};
  output[key2.index] = key2;

  types::Capk key3;
  key3.index = 0x14;
  key3.modulus = {0xAE, 0xED, 0x55, 0xB9, 0xEE, 0x00, 0xE1, 0xEC, 0xEB, 0x04, 0x5F, 0x61, 0xD2, 0xDA, 0x9A, 0x66, 0xAB,
      0x63, 0x7B, 0x43, 0xFB, 0x5C, 0xDB, 0xDB, 0x22, 0xA2, 0xFB, 0xB2, 0x5B, 0xE0, 0x61, 0xE9, 0x37, 0xE3, 0x82, 0x44,
      0xEE, 0x51, 0x32, 0xF5, 0x30, 0x14, 0x4A, 0x3F, 0x26, 0x89, 0x07, 0xD8, 0xFD, 0x64, 0x88, 0x63, 0xF5, 0xA9, 0x6F,
      0xED, 0x7E, 0x42, 0x08, 0x9E, 0x93, 0x45, 0x7A, 0xDC, 0x0E, 0x1B, 0xC8, 0x9C, 0x58, 0xA0, 0xDB, 0x72, 0x67, 0x5F,
      0xBC, 0x47, 0xFE, 0xE9, 0xFF, 0x33, 0xC1, 0x6A, 0xDE, 0x6D, 0x34, 0x19, 0x36, 0xB0, 0x6B, 0x6A, 0x6F, 0x5E, 0xF6,
      0xF6, 0x6A, 0x4E, 0xDD, 0x98, 0x1D, 0xF7, 0x5D, 0xA8, 0x39, 0x9C, 0x30, 0x53, 0xF4, 0x30, 0xEC, 0xA3, 0x42, 0x43,
      0x7C, 0x23, 0xAF, 0x42, 0x3A, 0x21, 0x1A, 0xC9, 0xF5, 0x8E, 0xAF, 0x09, 0xB0, 0xF8, 0x37, 0xDE, 0x9D, 0x86, 0xC7,
      0x10, 0x9D, 0xB1, 0x64, 0x65, 0x61, 0xAA, 0x5A, 0xF0, 0x28, 0x9A, 0xF5, 0x51, 0x4A, 0xC6, 0x4B, 0xC2, 0xD9, 0xD3,
      0x6A, 0x17, 0x9B, 0xB8, 0xA7, 0x97, 0x1E, 0x2B, 0xFA, 0x03, 0xA9, 0xE4, 0xB8, 0x47, 0xFD, 0x3D, 0x63, 0x52, 0x4D,
      0x43, 0xA0, 0xE8, 0x00, 0x35, 0x47, 0xB9, 0x4A, 0x8A, 0x75, 0xE5, 0x19, 0xDF, 0x31, 0x77, 0xD0, 0xA6, 0x0B, 0xC0,
      0xB4, 0xBA, 0xB1, 0xEA, 0x59, 0xA2, 0xCB, 0xB4, 0xD2, 0xD6, 0x23, 0x54, 0xE9, 0x26, 0xE9, 0xC7, 0xD3, 0xBE, 0x41,
      0x81, 0xE8, 0x1B, 0xA6, 0x0F, 0x82, 0x85, 0xA8, 0x96, 0xD1, 0x7D, 0xA8, 0xC3, 0x24, 0x24, 0x81, 0xB6, 0xC4, 0x05,
      0x76, 0x9A, 0x39, 0xD5, 0x47, 0xC7, 0x4E, 0xD9, 0xFF, 0x95, 0xA7, 0x0A, 0x79, 0x60, 0x46, 0xB5, 0xEF, 0xF3, 0x66,
      0x82, 0xDC, 0x29};
  key3.exponent = {0x03};
  key3.sha1 = {0xC0, 0xD1, 0x5F, 0x6C, 0xD9, 0x57, 0xE4, 0x91, 0xDB, 0x56, 0xDC, 0xDD, 0x1C, 0xA8, 0x7A, 0x03, 0xEB, 0xE0, 0x6B, 0x7B};
  output[key3.index] = key3;
  return output;
}

std::map<unsigned int, types::Capk> GetJcbTestCapks() {
  std::map<unsigned int, types::Capk> output;
  output = GetJcbLiveCapks();
  types::Capk key1;
  key1.index = 0x11;
  key1.modulus = { 0xA2, 0x58, 0x3A, 0xA4, 0x07, 0x46, 0xE3, 0xA6, 0x3C, 0x22, 0x47, 0x8F, 0x57, 0x6D, 0x1E, 0xFC, 0x5F, 0xB0,
      0x46, 0x13, 0x5A, 0x6F, 0xC7, 0x39, 0xE8, 0x2B, 0x55, 0x03, 0x5F, 0x71, 0xB0, 0x9B, 0xEB, 0x56, 0x6E, 0xDB, 0x99, 0x68,
      0xDD, 0x64, 0x9B, 0x94, 0xB6, 0xDE, 0xDC, 0x03, 0x38, 0x99, 0x88, 0x4E, 0x90, 0x8C, 0x27, 0xBE, 0x1C, 0xD2, 0x91, 0xE5,
      0x43, 0x6F, 0x76, 0x25, 0x53, 0x29, 0x77, 0x63, 0xDA, 0xA3, 0xB8, 0x90, 0xD7, 0x78, 0xC0, 0xF0, 0x1E, 0x33, 0x44, 0xCE,
      0xCD, 0xFB, 0x3B, 0xA7, 0x0D, 0x7E, 0x05, 0x5B, 0x8C, 0x76, 0x0D, 0x01, 0x79, 0xA4, 0x03, 0xD6, 0xB5, 0x5F, 0x2B, 0x3B,
      0x08, 0x39, 0x12, 0xB1, 0x83, 0xAD, 0xB7, 0x92, 0x74, 0x41, 0xBE, 0xD3, 0x39, 0x5A, 0x19, 0x9E, 0xEF, 0xE0, 0xDE, 0xBD,
      0x1F, 0x5F, 0xC3, 0x26, 0x40, 0x33, 0xDA, 0x85, 0x6F, 0x4A, 0x8B, 0x93, 0x91, 0x68, 0x85, 0xBD, 0x42, 0xF9, 0xC1, 0xF4,
      0x56, 0xAA, 0xB8, 0xCF, 0xA8, 0x3A, 0xC5, 0x74, 0x83, 0x3E, 0xB5, 0xE8, 0x7B, 0xB9, 0xD4, 0xC0, 0x06, 0xA4, 0xB5, 0x34,
      0x6B, 0xD9, 0xE1, 0x7E, 0x13, 0x9A, 0xB6, 0x55, 0x2D, 0x9C, 0x58, 0xBC, 0x04, 0x11, 0x95, 0x33, 0x64, 0x85};
  key1.exponent = {0x03};
  key1.sha1 = { 0xD9, 0xFD, 0x62, 0xC9, 0xDD, 0x4E, 0x6D, 0xE7, 0x74, 0x1E, 0x9A, 0x17, 0xFB, 0x1F, 0xF2, 0xC5, 0xDB, 0x94, 0x8B, 0xCB};
  output[key1.index] = key1;

  types::Capk key2;
  key2.index = 0x0F;
  key2.modulus = { 0x9E, 0xFB, 0xAD, 0xDE, 0x40, 0x71, 0xD4, 0xEF, 0x98, 0xC9, 0x69, 0xEB, 0x32, 0xAF, 0x85, 0x48, 0x64, 0x60,
      0x2E, 0x51, 0x5D, 0x65, 0x01, 0xFD, 0xE5, 0x76, 0xB3, 0x10, 0x96, 0x4A, 0x4F, 0x7C, 0x2C, 0xE8, 0x42, 0xAB, 0xEF, 0xAF,
      0xC5, 0xDC, 0x9E, 0x26, 0xA6, 0x19, 0xBC, 0xF2, 0x61, 0x4F, 0xE0, 0x73, 0x75, 0xB9, 0x24, 0x9B, 0xEF, 0xA0, 0x9C, 0xFE,
      0xE7, 0x02, 0x32, 0xE7, 0x5F, 0xFD, 0x64, 0x75, 0x71, 0x28, 0x0C, 0x76, 0xFF, 0xCA, 0x87, 0x51, 0x1A, 0xD2, 0x55, 0xB9,
      0x8A, 0x6B, 0x57, 0x75, 0x91, 0xAF, 0x01, 0xD0, 0x03, 0xBD, 0x6B, 0xF7, 0xE1, 0xFC, 0xE4, 0xDF, 0xD2, 0x0D, 0x0D, 0x02,
      0x97, 0xED, 0x5E, 0xCA, 0x25, 0xDE, 0x26, 0x1F, 0x37, 0xEF, 0xE9, 0xE1, 0x75, 0xFB, 0x5F, 0x12, 0xD2, 0x50, 0x3D, 0x8C,
      0xFB, 0x06, 0x0A, 0x63, 0x13, 0x85, 0x11, 0xFE, 0x0E, 0x12, 0x5C, 0xF3, 0xA6, 0x43, 0xAF, 0xD7, 0xD6, 0x6D, 0xCF, 0x96,
      0x82, 0xBD, 0x24, 0x6D, 0xDE, 0xA1};
  key2.exponent = {0x03};
  key2.sha1 = {0x2A, 0x1B, 0x82, 0xDE, 0x00, 0xF5, 0xF0, 0xC4, 0x01, 0x76, 0x0A, 0xDF, 0x52, 0x82, 0x28, 0xD3, 0xED, 0xE0, 0xF4, 0x03};
  output[key2.index] = key2;

  return output;
}

}
