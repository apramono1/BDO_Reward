/*
 ------------------------------------------------------------------------------
 INGENICO Technical Software Department
 ------------------------------------------------------------------------------
 Copyright (c) 2015 INGENICO S.A.
 28-32 boulevard de Grenelle 75015 Paris, France.
 All rights reserved.
 This source program is the property of the INGENICO Company mentioned above
 and may not be copied in any form or by any means, whether in part or in whole,
 except under license expressly granted by such INGENICO company.
 All copies of this source program, whether in part or in whole, and
 whether modified or not, must display this and all other
 embedded copyright and ownership notices in full.
 ------------------------------------------------------------------------------
 */

#include <map>
#include <types/capk.h>

namespace bdor {

std::map<unsigned int, types::Capk> GetMasterCardLiveCapks() {
  std::map<unsigned int, types::Capk> output;

  types::Capk key1;
  key1.index = 0x04;
  key1.modulus = { 0xA6, 0xDA, 0x42, 0x83, 0x87, 0xA5, 0x02, 0xD7, 0xDD, 0xFB, 0x7A, 0x74, 0xD3, 0xF4, 0x12, 0xBE,
      0x76, 0x26, 0x27, 0x19, 0x7B, 0x25, 0x43, 0x5B, 0x7A, 0x81, 0x71, 0x6A, 0x70, 0x01, 0x57, 0xDD, 0xD0, 0x6F, 0x7C, 0xC9, 0x9D, 0x6C, 0xA2, 0x8C, 0x24,
        0x70, 0x52, 0x7E, 0x2C, 0x03, 0x61, 0x6B, 0x9C, 0x59, 0x21, 0x73, 0x57, 0xC2, 0x67, 0x4F, 0x58, 0x3B, 0x3B, 0xA5, 0xC7, 0xDC, 0xF2, 0x83, 0x86, 0x92,
        0xD0, 0x23, 0xE3, 0x56, 0x24, 0x20, 0xB4, 0x61, 0x5C, 0x43, 0x9C, 0xA9, 0x7C, 0x44, 0xDC, 0x9A, 0x24, 0x9C, 0xFC, 0xE7, 0xB3, 0xBF, 0xB2, 0x2F, 0x68,
        0x22, 0x8C, 0x3A, 0xF1, 0x33, 0x29, 0xAA, 0x4A, 0x61, 0x3C, 0xF8, 0xDD, 0x85, 0x35, 0x02, 0x37, 0x3D, 0x62, 0xE4, 0x9A, 0xB2, 0x56, 0xD2, 0xBC, 0x17,
        0x12, 0x0E, 0x54, 0xAE, 0xDC, 0xED, 0x6D, 0x96, 0xA4, 0x28, 0x7A, 0xCC, 0x5C, 0x04, 0x67, 0x7D, 0x4A, 0x5A, 0x32, 0x0D, 0xB8, 0xBE, 0xE2, 0xF7, 0x75,
        0xE5, 0xFE, 0xC5 };

  key1.exponent = {0x03};
  key1.sha1 = { 0x38, 0x1A, 0x03, 0x5D, 0xA5, 0x8B, 0x48, 0x2E, 0xE2, 0xAF, 0x75, 0xF4, 0xC3, 0xF2, 0xCA, 0x46, 0x9B, 0xA4, 0xAA, 0x6C };;
  output[key1.index] = key1;

  types::Capk key2;
  key2.index = 0x05;
  key2.modulus =  { 0xB8, 0x04, 0x8A, 0xBC, 0x30, 0xC9, 0x0D, 0x97, 0x63, 0x36, 0x54, 0x3E, 0x3F, 0xD7, 0x09, 0x1C,
       0x8F, 0xE4, 0x80, 0x0D, 0xF8, 0x20, 0xED, 0x55, 0xE7, 0xE9, 0x48, 0x13, 0xED, 0x00, 0x55, 0x5B, 0x57, 0x3F, 0xEC, 0xA3, 0xD8, 0x4A, 0xF6, 0x13, 0x1A,
         0x65, 0x1D, 0x66, 0xCF, 0xF4, 0x28, 0x4F, 0xB1, 0x3B, 0x63, 0x5E, 0xDD, 0x0E, 0xE4, 0x01, 0x76, 0xD8, 0xBF, 0x04, 0xB7, 0xFD, 0x1C, 0x7B, 0xAC, 0xF9,
       0xAC, 0x73, 0x27, 0xDF, 0xAA, 0x8A, 0xA7, 0x2D, 0x10, 0xDB, 0x3B, 0x8E, 0x70, 0xB2, 0xDD, 0xD8, 0x11, 0xCB, 0x41, 0x96, 0x52, 0x5E, 0xA3, 0x86, 0xAC,
         0xC3, 0x3C, 0x0D, 0x9D, 0x45, 0x75, 0x91, 0x64, 0x69, 0xC4, 0xE4, 0xF5, 0x3E, 0x8E, 0x1C, 0x91, 0x2C, 0xC6, 0x18, 0xCB, 0x22, 0xDD, 0xE7, 0xC3, 0x56,
         0x8E, 0x90, 0x02, 0x2E, 0x6B, 0xBA, 0x77, 0x02, 0x02, 0xE4, 0x52, 0x2A, 0x2D, 0xD6, 0x23, 0xD1, 0x80, 0xE2, 0x15, 0xBD, 0x1D, 0x15, 0x07, 0xFE, 0x3D,
         0xC9, 0x0C, 0xA3, 0x10, 0xD2, 0x7B, 0x3E, 0xFC, 0xCD, 0x8F, 0x83, 0xDE, 0x30, 0x52, 0xCA, 0xD1, 0xE4, 0x89, 0x38, 0xC6, 0x8D, 0x09, 0x5A, 0xAC, 0x91,
         0xB5, 0xF3, 0x7E, 0x28, 0xBB, 0x49, 0xEC, 0x7E, 0xD5, 0x97 };
  key2.exponent = {0x03};
  key2.sha1 =  { 0xEB, 0xFA, 0x0D, 0x5D, 0x06, 0xD8, 0xCE, 0x70, 0x2D, 0xA3, 0xEA, 0xE8, 0x90, 0x70, 0x1D, 0x45, 0xE2, 0x74, 0xC8, 0x45 };
  output[key2.index] = key2;

  types::Capk key3;
  key3.index = 0x06;
  key3.modulus = { 0xCB, 0x26, 0xFC, 0x83, 0x0B, 0x43, 0x78, 0x5B, 0x2B, 0xCE, 0x37, 0xC8, 0x1E, 0xD3, 0x34, 0x62
        , 0x2F, 0x96, 0x22, 0xF4, 0xC8, 0x9A, 0xAE, 0x64, 0x10, 0x46, 0xB2, 0x35, 0x34, 0x33, 0x88, 0x3F, 0x30, 0x7F, 0xB7, 0xC9, 0x74, 0x16, 0x2D, 0xA7, 0x2F
        , 0x7A, 0x4E, 0xC7, 0x5D, 0x9D, 0x65, 0x73, 0x36, 0x86, 0x5B, 0x8D, 0x30, 0x23, 0xD3, 0xD6, 0x45, 0x66, 0x76, 0x25, 0xC9, 0xA0, 0x7A, 0x6B, 0x7A, 0x13
        , 0x7C, 0xF0, 0xC6, 0x41, 0x98, 0xAE, 0x38, 0xFC, 0x23, 0x80, 0x06, 0xFB, 0x26, 0x03, 0xF4, 0x1F, 0x4F, 0x3B, 0xB9, 0xDA, 0x13, 0x47, 0x27, 0x0F, 0x2F
        , 0x5D, 0x8C, 0x60, 0x6E, 0x42, 0x09, 0x58, 0xC5, 0xF7, 0xD5, 0x0A, 0x71, 0xDE, 0x30, 0x14, 0x2F, 0x70, 0xDE, 0x46, 0x88, 0x89, 0xB5, 0xE3, 0xA0, 0x86
        , 0x95, 0xB9, 0x38, 0xA5, 0x0F, 0xC9, 0x80, 0x39, 0x3A, 0x9C, 0xBC, 0xE4, 0x4A, 0xD2, 0xD6, 0x4F, 0x63, 0x0B, 0xB3, 0x3A, 0xD3, 0xF5, 0xF5, 0xFD, 0x49
        , 0x5D, 0x31, 0xF3, 0x78, 0x18, 0xC1, 0xD9, 0x40, 0x71, 0x34, 0x2E, 0x07, 0xF1, 0xBE, 0xC2, 0x19, 0x4F, 0x60, 0x35, 0xBA, 0x5D, 0xED, 0x39, 0x36, 0x50
        , 0x0E, 0xB8, 0x2D, 0xFD, 0xA6, 0xE8, 0xAF, 0xB6, 0x55, 0xB1, 0xEF, 0x3D, 0x0D, 0x7E, 0xBF, 0x86, 0xB6, 0x6D, 0xD9, 0xF2, 0x9F, 0x6B, 0x1D, 0x32, 0x4F
        , 0xE8, 0xB2, 0x6C, 0xE3, 0x8A, 0xB2, 0x01, 0x3D, 0xD1, 0x3F, 0x61, 0x1E, 0x7A, 0x59, 0x4D, 0x67, 0x5C, 0x44, 0x32, 0x35, 0x0E, 0xA2, 0x44, 0xCC, 0x34
        , 0xF3, 0x87, 0x3C, 0xBA, 0x06, 0x59, 0x29, 0x87, 0xA1, 0xD7, 0xE8, 0x52, 0xAD, 0xC2, 0x2E, 0xF5, 0xA2, 0xEE, 0x28, 0x13, 0x20, 0x31, 0xE4, 0x8F, 0x74
        , 0x03, 0x7E, 0x3B, 0x34, 0xAB, 0x74, 0x7F };
  key3.exponent = {0x03};
  key3.sha1 =  { 0xF9, 0x10, 0xA1, 0x50, 0x4D, 0x5F, 0xFB, 0x79, 0x3D, 0x94, 0xF3, 0xB5, 0x00, 0x76, 0x5E, 0x1A, 0xBC, 0xAD, 0x72, 0xD9 };
  output[key3.index] = key3;

  return output;
}

std::map<unsigned int, types::Capk> GetMasterCardTestCapks() {
  std::map<unsigned int, types::Capk> output;
  output = GetMasterCardLiveCapks();

  types::Capk key1;
  key1.index = 0xF3;
  key1.modulus = {0x98, 0xF0, 0xC7, 0x70, 0xF2, 0x38, 0x64, 0xC2, 0xE7, 0x66, 0xDF, 0x02, 0xD1, 0xE8, 0x33, 0xDF, 0xF4, 0xFF, 0xE9, 0x2D, 0x69,
    0x6E, 0x16, 0x42, 0xF0, 0xA8, 0x8C, 0x56, 0x94, 0xC6, 0x47, 0x9D, 0x16, 0xDB, 0x15, 0x37, 0xBF, 0xE2, 0x9E, 0x4F, 0xDC, 0x6E,
    0x6E, 0x8A, 0xFD, 0x1B, 0x0E, 0xB7, 0xEA, 0x01, 0x24, 0x72, 0x3C, 0x33, 0x31, 0x79, 0xBF, 0x19, 0xE9, 0x3F, 0x10, 0x65, 0x8B,
    0x2F, 0x77, 0x6E, 0x82, 0x9E, 0x87, 0xDA, 0xED, 0xA9, 0xC9, 0x4A, 0x8B, 0x33, 0x82, 0x19, 0x9A, 0x35, 0x0C, 0x07, 0x79, 0x77,
    0xC9, 0x7A, 0xFF, 0x08, 0xFD, 0x11, 0x31, 0x0A, 0xC9, 0x50, 0xA7, 0x2C, 0x3C, 0xA5, 0x00, 0x2E, 0xF5, 0x13, 0xFC, 0xCC, 0x28,
    0x6E, 0x64, 0x6E, 0x3C, 0x53, 0x87, 0x53, 0x5D, 0x50, 0x95, 0x14, 0xB3, 0xB3, 0x26, 0xE1, 0x23, 0x4F, 0x9C, 0xB4, 0x8C, 0x36,
    0xDD, 0xD4, 0x4B, 0x41, 0x6D, 0x23, 0x65, 0x40, 0x34, 0xA6, 0x6F, 0x40, 0x3B, 0xA5, 0x11, 0xC5, 0xEF, 0xA3};
  key1.exponent = {0x03};
  key1.sha1 = {0xA6, 0x9A, 0xC7, 0x60, 0x3D, 0xAF, 0x56, 0x6E, 0x97, 0x2D, 0xED, 0xC2, 0xCB, 0x43, 0x3E, 0x07, 0xE8, 0xB0, 0x1A, 0x9A};
  output[key1.index] = key1;

  types::Capk key2;
  key2.index = 0xF8;
  key2.modulus = {0xA1, 0xF5, 0xE1, 0xC9, 0xBD, 0x86, 0x50, 0xBD, 0x43, 0xAB, 0x6E, 0xE5, 0x6B, 0x89, 0x1E, 0xF7, 0x45, 0x9C, 0x0A, 0x24, 0xFA,
    0x84, 0xF9, 0x12, 0x7D, 0x1A, 0x6C, 0x79, 0xD4, 0x93, 0x0F, 0x6D, 0xB1, 0x85, 0x2E, 0x25, 0x10, 0xF1, 0x8B, 0x61, 0xCD, 0x35,
    0x4D, 0xB8, 0x3A, 0x35, 0x6B, 0xD1, 0x90, 0xB8, 0x8A, 0xB8, 0xDF, 0x04, 0x28, 0x4D, 0x02, 0xA4, 0x20, 0x4A, 0x7B, 0x6C, 0xB7,
    0xC5, 0x55, 0x19, 0x77, 0xA9, 0xB3, 0x63, 0x79, 0xCA, 0x3D, 0xE1, 0xA0, 0x8E, 0x69, 0xF3, 0x01, 0xC9, 0x5C, 0xC1, 0xC2, 0x05,
    0x06, 0x95, 0x92, 0x75, 0xF4, 0x17, 0x23, 0xDD, 0x5D, 0x29, 0x25, 0x29, 0x05, 0x79, 0xE5, 0xA9, 0x5B, 0x0D, 0xF6, 0x32, 0x3F,
    0xC8, 0xE9, 0x27, 0x3D, 0x6F, 0x84, 0x91, 0x98, 0xC4, 0x99, 0x62, 0x09, 0x16, 0x6D, 0x9B, 0xFC, 0x97, 0x3C, 0x36, 0x1C, 0xC8,
    0x26, 0xE1};
  key2.exponent = {0x03};
  key2.sha1 = {0xF0, 0x6E, 0xCC, 0x6D, 0x2A, 0xAE, 0xBF, 0x25, 0x9B, 0x7E, 0x75, 0x5A, 0x38, 0xD9, 0xA9, 0xB2, 0x4E, 0x2F, 0xF3, 0xDD};
  output[key2.index] = key2;

  types::Capk key3;
  key3.index = 0xFA;
  key3.modulus = {0xA9, 0x0F, 0xCD, 0x55, 0xAA, 0x2D, 0x5D, 0x99, 0x63, 0xE3, 0x5E, 0xD0, 0xF4, 0x40, 0x17, 0x76, 0x99, 0x83, 0x2F, 0x49, 0xC6,
    0xBA, 0xB1, 0x5C, 0xDA, 0xE5, 0x79, 0x4B, 0xE9, 0x3F, 0x93, 0x4D, 0x44, 0x62, 0xD5, 0xD1, 0x27, 0x62, 0xE4, 0x8C, 0x38, 0xBA,
    0x83, 0xD8, 0x44, 0x5D, 0xEA, 0xA7, 0x41, 0x95, 0xA3, 0x01, 0xA1, 0x02, 0xB2, 0xF1, 0x14, 0xEA, 0xDA, 0x0D, 0x18, 0x0E, 0xE5,
    0xE7, 0xA5, 0xC7, 0x3E, 0x0C, 0x4E, 0x11, 0xF6, 0x7A, 0x43, 0xDD, 0xAB, 0x5D, 0x55, 0x68, 0x3B, 0x14, 0x74, 0xCC, 0x06, 0x27,
    0xF4, 0x4B, 0x8D, 0x30, 0x88, 0xA4, 0x92, 0xFF, 0xAA, 0xDA, 0xD4, 0xF4, 0x24, 0x22, 0xD0, 0xE7, 0x01, 0x35, 0x36, 0xC3, 0xC4,
    0x9A, 0xD3, 0xD0, 0xFA, 0xE9, 0x64, 0x59, 0xB0, 0xF6, 0xB1, 0xB6, 0x05, 0x65, 0x38, 0xA3, 0xD6, 0xD4, 0x46, 0x40, 0xF9, 0x44,
    0x67, 0xB1, 0x08, 0x86, 0x7D, 0xEC, 0x40, 0xFA, 0xAE, 0xCD, 0x74, 0x0C, 0x00, 0xE2, 0xB7, 0xA8, 0x85, 0x2D};
  key3.exponent = {0x03};
  key3.sha1 = {0x5B, 0xED, 0x40, 0x68, 0xD9, 0x6E, 0xA1, 0x6D, 0x2D, 0x77, 0xE0, 0x3D, 0x60, 0x36, 0xFC, 0x7A, 0x16, 0x0E, 0xA9, 0x9C};
  output[key3.index] = key3;

  types::Capk key4;
  key4.index = 0xFE;
  key4.modulus = {0xA6, 0x53, 0xEA, 0xC1, 0xC0, 0xF7, 0x86, 0xC8, 0x72, 0x4F, 0x73, 0x7F, 0x17, 0x29, 0x97, 0xD6, 0x3D, 0x1C, 0x32, 0x51, 0xC4,
    0x44, 0x02, 0x04, 0x9B, 0x86, 0x5B, 0xAE, 0x87, 0x7D, 0x0F, 0x39, 0x8C, 0xBF, 0xBE, 0x8A, 0x60, 0x35, 0xE2, 0x4A, 0xFA, 0x08,
    0x6B, 0xEF, 0xDE, 0x93, 0x51, 0xE5, 0x4B, 0x95, 0x70, 0x8E, 0xE6, 0x72, 0xF0, 0x96, 0x8B, 0xCD, 0x50, 0xDC, 0xE4, 0x0F, 0x78,
    0x33, 0x22, 0xB2, 0xAB, 0xA0, 0x4E, 0xF1, 0x37, 0xEF, 0x18, 0xAB, 0xF0, 0x3C, 0x7D, 0xBC, 0x58, 0x13, 0xAE, 0xAE, 0xF3, 0xAA,
    0x77, 0x97, 0xBA, 0x15, 0xDF, 0x7D, 0x5B, 0xA1, 0xCB, 0xAF, 0x7F, 0xD5, 0x20, 0xB5, 0xA4, 0x82, 0xD8, 0xD3, 0xFE, 0xE1, 0x05,
    0x07, 0x78, 0x71, 0x11, 0x3E, 0x23, 0xA4, 0x9A, 0xF3, 0x92, 0x65, 0x54, 0xA7, 0x0F, 0xE1, 0x0E, 0xD7, 0x28, 0xCF, 0x79, 0x3B,
    0x62, 0xA1};
  key4.exponent = {0x03};
  key4.sha1 = {0x9A, 0x29, 0x5B, 0x05, 0xFB, 0x39, 0x0E, 0xF7, 0x92, 0x3F, 0x57, 0x61, 0x8A, 0x9F, 0xDA, 0x29, 0x41, 0xFC, 0x34, 0xE0};
  output[key4.index] = key4;

  types::Capk key5;
  key5.index = 0xF1;
  key5.modulus = {0xA0, 0xDC, 0xF4, 0xBD, 0xE1, 0x9C, 0x35, 0x46, 0xB4, 0xB6, 0xF0, 0x41, 0x4D, 0x17, 0x4D, 0xDE, 0x29, 0x4A, 0xAB, 0xBB, 0x82,
    0x8C, 0x5A, 0x83, 0x4D, 0x73, 0xAA, 0xE2, 0x7C, 0x99, 0xB0, 0xB0, 0x53, 0xA9, 0x02, 0x78, 0x00, 0x72, 0x39, 0xB6, 0x45, 0x9F,
    0xF0, 0xBB, 0xCD, 0x7B, 0x4B, 0x9C, 0x6C, 0x50, 0xAC, 0x02, 0xCE, 0x91, 0x36, 0x8D, 0xA1, 0xBD, 0x21, 0xAA, 0xEA, 0xDB, 0xC6,
    0x53, 0x47, 0x33, 0x7D, 0x89, 0xB6, 0x8F, 0x5C, 0x99, 0xA0, 0x9D, 0x05, 0xBE, 0x02, 0xDD, 0x1F, 0x8C, 0x5B, 0xA2, 0x0E, 0x2F,
    0x13, 0xFB, 0x2A, 0x27, 0xC4, 0x1D, 0x3F, 0x85, 0xCA, 0xD5, 0xCF, 0x66, 0x68, 0xE7, 0x58, 0x51, 0xEC, 0x66, 0xED, 0xBF, 0x98,
    0x85, 0x1F, 0xD4, 0xE4, 0x2C, 0x44, 0xC1, 0xD5, 0x9F, 0x59, 0x84, 0x70, 0x3B, 0x27, 0xD5, 0xB9, 0xF2, 0x1B, 0x8F, 0xA0, 0xD9,
    0x32, 0x79, 0xFB, 0xBF, 0x69, 0xE0, 0x90, 0x64, 0x29, 0x09, 0xC9, 0xEA, 0x27, 0xF8, 0x98, 0x95, 0x95, 0x41, 0xAA, 0x67, 0x57,
    0xF5, 0xF6, 0x24, 0x10, 0x4F, 0x6E, 0x1D, 0x3A, 0x95, 0x32, 0xF2, 0xA6, 0xE5, 0x15, 0x15, 0xAE, 0xAD, 0x1B, 0x43, 0xB3, 0xD7,
    0x83, 0x50, 0x88, 0xA2, 0xFA, 0xFA, 0x7B, 0xE7};
  key5.exponent = {0x03};
  key5.sha1 = {0xD8, 0xE6, 0x8D, 0xA1, 0x67, 0xAB, 0x5A, 0x85, 0xD8, 0xC3, 0xD5, 0x5E, 0xCB, 0x9B, 0x05, 0x17, 0xA1, 0xA5, 0xB4, 0xBB};
  output[key5.index] = key5;

  types::Capk key6;
  key6.index = 0xEF;
  key6.modulus = {0xA1, 0x91, 0xCB, 0x87, 0x47, 0x3F, 0x29, 0x34, 0x9B, 0x5D, 0x60, 0xA8, 0x8B, 0x3E, 0xAE, 0xE0, 0x97, 0x3A, 0xA6, 0xF1, 0xA0,
    0x82, 0xF3, 0x58, 0xD8, 0x49, 0xFD, 0xDF, 0xF9, 0xC0, 0x91, 0xF8, 0x99, 0xED, 0xA9, 0x79, 0x2C, 0xAF, 0x09, 0xEF, 0x28, 0xF5,
    0xD2, 0x24, 0x04, 0xB8, 0x8A, 0x22, 0x93, 0xEE, 0xBB, 0xC1, 0x94, 0x9C, 0x43, 0xBE, 0xA4, 0xD6, 0x0C, 0xFD, 0x87, 0x9A, 0x15,
    0x39, 0x54, 0x4E, 0x09, 0xE0, 0xF0, 0x9F, 0x60, 0xF0, 0x65, 0xB2, 0xBF, 0x2A, 0x13, 0xEC, 0xC7, 0x05, 0xF3, 0xD4, 0x68, 0xB9,
    0xD3, 0x3A, 0xE7, 0x7A, 0xD9, 0xD3, 0xF1, 0x9C, 0xA4, 0x0F, 0x23, 0xDC, 0xF5, 0xEB, 0x7C, 0x04, 0xDC, 0x8F, 0x69, 0xEB, 0xA5,
    0x65, 0xB1, 0xEB, 0xCB, 0x46, 0x86, 0xCD, 0x27, 0x47, 0x85, 0x53, 0x0F, 0xF6, 0xF6, 0xE9, 0xEE, 0x43, 0xAA, 0x43, 0xFD, 0xB0,
    0x2C, 0xE0, 0x0D, 0xAE, 0xC1, 0x5C, 0x7B, 0x8F, 0xD6, 0xA9, 0xB3, 0x94, 0xBA, 0xBA, 0x41, 0x9D, 0x3F, 0x6D, 0xC8, 0x5E, 0x16,
    0x56, 0x9B, 0xE8, 0xE7, 0x69, 0x89, 0x68, 0x8E, 0xFE, 0xA2, 0xDF, 0x22, 0xFF, 0x7D, 0x35, 0xC0, 0x43, 0x33, 0x8D, 0xEA, 0xA9,
    0x82, 0xA0, 0x2B, 0x86, 0x6D, 0xE5, 0x32, 0x85, 0x19, 0xEB, 0xBC, 0xD6, 0xF0, 0x3C, 0xDD, 0x68, 0x66, 0x73, 0x84, 0x7F, 0x84,
    0xDB, 0x65, 0x1A, 0xB8, 0x6C, 0x28, 0xCF, 0x14, 0x62, 0x56, 0x2C, 0x57, 0x7B, 0x85, 0x35, 0x64, 0xA2, 0x90, 0xC8, 0x55, 0x6D,
    0x81, 0x85, 0x31, 0x26, 0x8D, 0x25, 0xCC, 0x98, 0xA4, 0xCC, 0x6A, 0x0B, 0xDF, 0xFF, 0xDA, 0x2D, 0xCC, 0xA3, 0xA9, 0x4C, 0x99,
    0x85, 0x59, 0xE3, 0x07, 0xFD, 0xDF, 0x91, 0x50, 0x06, 0xD9, 0xA9, 0x87, 0xB0, 0x7D, 0xDA, 0xEB, 0x3B};
  key6.exponent = {0x03};
  key6.sha1 = {0x21, 0x76, 0x6E, 0xBB, 0x0E, 0xE1, 0x22, 0xAF, 0xB6, 0x5D, 0x78, 0x45, 0xB7, 0x3D, 0xB4, 0x6B, 0xAB, 0x65, 0x42, 0x7A};
  output[key6.index] = key6;

  return output;
}

}

